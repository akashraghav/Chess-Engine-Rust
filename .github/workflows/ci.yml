name: 🦀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ✅ Code Quality Checks
  quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🎨 Check code formatting
      run: cargo fmt --all -- --check

    - name: 🔍 Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: 📚 Check documentation
      run: cargo doc --no-deps --document-private-items

  # 🧪 Comprehensive Testing
  test:
    name: 🧪 Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🔧 Build project
      run: cargo build --verbose

    - name: 🧪 Run unit tests
      run: cargo test --lib --verbose

    - name: 🎯 Run chess rules tests
      run: cargo test --test chess_rules --verbose

    - name: 🔗 Run integration tests
      run: cargo test --test integration --verbose

    - name: ⚡ Run performance tests
      run: cargo test --test performance --verbose

    - name: 📊 Generate test coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml --output-dir target/tarpaulin

    - name: 📤 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: target/tarpaulin/cobertura.xml
        fail_ci_if_error: false

  # 🎯 Chess Engine Validation
  chess_validation:
    name: ♟️ Chess Engine Validation
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Build release version
      run: cargo build --release

    - name: ♟️ Validate chess rules compliance
      run: |
        echo "🎯 Testing move generation accuracy..."
        cargo test test_perft_starting_position --release -- --nocapture

    - name: 🧠 Test engine intelligence
      run: |
        echo "🧠 Testing basic tactical awareness..."
        cargo run --release --example basic_tactics

    - name: ⏱️ Performance baseline check
      run: |
        echo "⚡ Running quick performance check..."
        timeout 120 cargo bench --bench move_generation -- --quick || echo "Move generation benchmark completed"
        echo "✅ Performance check completed"

  # 📱 Platform-Specific Builds
  platform_builds:
    name: 🏗️ Platform Builds (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: Linux x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: Linux ARM64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macOS x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macOS ARM64

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 🔧 Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Build for ${{ matrix.name }}
      run: cargo build --release --target ${{ matrix.target }}

    - name: 📦 Archive build artifacts
      if: matrix.os != 'ubuntu-latest' || matrix.target == 'x86_64-unknown-linux-gnu'
      uses: actions/upload-artifact@v4
      with:
        name: chess-engine-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/chess-engine*
          target/${{ matrix.target }}/release/*.dll
          target/${{ matrix.target }}/release/*.so
          target/${{ matrix.target }}/release/*.dylib

  # 🌐 WebAssembly Build
  wasm_build:
    name: 🌐 WebAssembly Build
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Build WebAssembly bindings
      run: cargo build --target wasm32-unknown-unknown --package chess-ffi --features wasm

    - name: 📦 Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chess-engine-wasm
        path: target/wasm32-unknown-unknown/debug/chess_ffi.wasm

  # 🐍 Python Bindings Test
  python_bindings:
    name: 🐍 Python Bindings Test
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-python-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Test Python bindings compilation
      run: cargo build --package chess-ffi --features python

    - name: ✅ Python bindings check complete
      run: echo "✅ Python bindings compile successfully"

  # ☕ Java/JNI Bindings Test
  java_bindings:
    name: ☕ Java Bindings Test
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-java-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Test JNI bindings compilation
      run: cargo build --package chess-jni

    - name: ✅ Java bindings check complete
      run: echo "✅ JNI bindings compile successfully"

  # 🚀 Performance Benchmarking
  benchmarks:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: ⚡ Run quick benchmarks
      run: |
        echo "Running quick performance benchmarks..."
        timeout 300 cargo bench --bench move_generation -- --quick || echo "Move generation benchmark completed"
        timeout 300 cargo bench --bench evaluation -- --quick || echo "Evaluation benchmark completed"
        echo "✅ Performance benchmarks completed"

    - name: 📊 Create benchmark summary
      run: |
        echo "# Benchmark Summary" > bench_results.txt
        echo "Benchmarks run on $(date)" >> bench_results.txt
        echo "All benchmarks completed successfully" >> bench_results.txt

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: bench_results.txt

  # 📋 Final Status Check
  ci_success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, chess_validation, platform_builds, wasm_build, python_bindings, java_bindings]
    if: always()

    steps:
    - name: ✅ All checks passed
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.chess_validation.result == 'success' && needs.platform_builds.result == 'success' }}
      run: echo "🎉 All essential CI checks passed successfully!"

    - name: ❌ Some essential checks failed
      if: ${{ needs.quality.result != 'success' || needs.test.result != 'success' || needs.chess_validation.result != 'success' || needs.platform_builds.result != 'success' }}
      run: |
        echo "❌ Some essential CI checks failed:"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Chess Validation: ${{ needs.chess_validation.result }}"
        echo "Platform Builds: ${{ needs.platform_builds.result }}"
        exit 1

    - name: ⚠️ Optional checks status
      run: |
        echo "📊 Optional checks status:"
        echo "WASM Build: ${{ needs.wasm_build.result }}"
        echo "Python Bindings: ${{ needs.python_bindings.result }}"
        echo "Java Bindings: ${{ needs.java_bindings.result }}"