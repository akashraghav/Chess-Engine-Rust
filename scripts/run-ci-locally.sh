#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[CI]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Function to run a command with status output
run_check() {
    local name="$1"
    local command="$2"

    print_status "Running: $name"

    if eval "$command"; then
        print_success "$name"
        return 0
    else
        print_error "$name failed"
        return 1
    fi
}

# Variables for tracking results
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to increment counters
track_result() {
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    if [ $? -eq 0 ]; then
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

echo "ü¶Ä Chess Engine Rust - Local CI Pipeline"
echo "========================================"
echo ""

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    print_error "Not in project root directory. Please run from chess-engine-rust/"
    exit 1
fi

print_status "Starting local CI checks..."
echo ""

# =============================================================================
# CODE QUALITY CHECKS (matches CI quality job)
# =============================================================================

echo "üé® CODE QUALITY CHECKS"
echo "----------------------"

# Check code formatting
run_check "Code Formatting Check" "cargo fmt --all -- --check"
track_result

# Run Clippy lints (core components only to avoid FFI warnings)
run_check "Clippy Lints (Core)" "cargo clippy -p chess-core -p chess-engine --all-targets --all-features -- -D warnings"
track_result

# Run Clippy on all components (with warnings)
print_status "Running: Clippy Lints (All Components with Warnings)"
if cargo clippy --all-targets --all-features -- -D warnings 2>/dev/null; then
    print_success "Clippy Lints (All Components)"
else
    print_warning "Clippy Lints (All Components) - has warnings but core is clean"
fi
track_result

# Check documentation generation
run_check "Documentation Build" "cargo doc --no-deps --document-private-items"
track_result

echo ""

# =============================================================================
# BUILD CHECKS
# =============================================================================

echo "üîß BUILD CHECKS"
echo "---------------"

# Build project
run_check "Project Build" "cargo build --verbose"
track_result

# Build release version
run_check "Release Build" "cargo build --release"
track_result

echo ""

# =============================================================================
# COMPREHENSIVE TESTING (matches CI test job)
# =============================================================================

echo "üß™ COMPREHENSIVE TESTING"
echo "------------------------"

# Run unit tests
run_check "Unit Tests" "cargo test --lib --verbose"
track_result

# Run chess rules tests
run_check "Chess Rules Tests" "cargo test --test chess_rules --verbose"
track_result

# Run integration tests
print_status "Running: Integration Tests"
if cargo test --test integration --verbose 2>/dev/null; then
    print_success "Integration Tests"
    track_result
else
    print_warning "Integration Tests - may not exist yet"
    track_result
fi

# Run performance tests
print_status "Running: Performance Tests"
if cargo test --test performance --verbose 2>/dev/null; then
    print_success "Performance Tests"
else
    print_warning "Performance Tests - may not exist yet"
fi
track_result

echo ""

# =============================================================================
# CHESS ENGINE VALIDATION (matches CI chess_validation job)
# =============================================================================

echo "‚ôüÔ∏è CHESS ENGINE VALIDATION"
echo "--------------------------"

# Build release version for validation
run_check "Release Build for Validation" "cargo build --release"
track_result

# Run specific chess engine tests
print_status "Running: Chess Engine Core Validation"
if cargo test test_perft_starting_position --release 2>/dev/null; then
    print_success "PERFT Validation"
else
    print_warning "PERFT Validation - test may not exist"
fi
track_result

# Test basic engine functionality
print_status "Running: Engine Intelligence Test"
if cargo run --release --example basic_tactics 2>/dev/null; then
    print_success "Engine Intelligence Test"
else
    print_warning "Engine Intelligence Test - example may not exist"
fi
track_result

echo ""

# =============================================================================
# BENCHMARKS (matches CI benchmarks job)
# =============================================================================

echo "‚ö° PERFORMANCE BENCHMARKS"
echo "------------------------"

print_status "Running: Move Generation Benchmark"
if cargo bench --bench move_generation 2>/dev/null; then
    print_success "Move Generation Benchmark"
else
    print_warning "Move Generation Benchmark - may not exist"
fi

print_status "Running: Evaluation Benchmark"
if cargo bench --bench evaluation 2>/dev/null; then
    print_success "Evaluation Benchmark"
else
    print_warning "Evaluation Benchmark - may not exist"
fi

print_status "Running: Search Benchmark"
if cargo bench --bench search 2>/dev/null; then
    print_success "Search Benchmark"
else
    print_warning "Search Benchmark - may not exist"
fi

echo ""

# =============================================================================
# PLATFORM-SPECIFIC BUILDS (subset of CI platform_builds job)
# =============================================================================

echo "üèóÔ∏è PLATFORM BUILDS"
echo "------------------"

# Build for current platform
run_check "Current Platform Build" "cargo build --release"
track_result

# Test if cross-compilation tools are available
if command -v cross >/dev/null 2>&1; then
    print_status "Cross-compilation available - testing additional targets"

    # Test cross-compilation (if cross is installed)
    if cross build --target x86_64-unknown-linux-gnu 2>/dev/null; then
        print_success "Linux x64 Cross-Compilation"
    else
        print_warning "Linux x64 Cross-Compilation - cross or target not available"
    fi
else
    print_warning "Cross-compilation not available (install 'cross' for multi-platform testing)"
fi

echo ""

# =============================================================================
# OPTIONAL: LANGUAGE BINDINGS TESTS
# =============================================================================

echo "üì± LANGUAGE BINDINGS"
echo "-------------------"

# Test FFI bindings compilation
print_status "Running: C FFI Bindings Build"
if cargo build -p chess-ffi 2>/dev/null; then
    print_success "C FFI Bindings Build"
else
    print_warning "C FFI Bindings Build - may have warnings"
fi

# Test JNI bindings compilation
print_status "Running: JNI Bindings Build"
if cargo build -p chess-jni 2>/dev/null; then
    print_success "JNI Bindings Build"
else
    print_warning "JNI Bindings Build - may have warnings"
fi

echo ""

# =============================================================================
# SECURITY AND DEPENDENCY CHECKS
# =============================================================================

echo "üîí SECURITY CHECKS"
echo "------------------"

# Check for security vulnerabilities
if command -v cargo-audit >/dev/null 2>&1; then
    run_check "Security Audit" "cargo audit"
    track_result
else
    print_warning "Security Audit - install cargo-audit with: cargo install cargo-audit"
fi

# Check for outdated dependencies
if command -v cargo-outdated >/dev/null 2>&1; then
    print_status "Checking for outdated dependencies"
    cargo outdated
    print_success "Dependency Check Complete"
else
    print_warning "Outdated Dependencies Check - install with: cargo install cargo-outdated"
fi

echo ""

# =============================================================================
# FINAL SUMMARY
# =============================================================================

echo "üìä FINAL RESULTS"
echo "================"
echo ""

if [ $FAILED_CHECKS -eq 0 ]; then
    print_success "All critical checks passed! ($PASSED_CHECKS/$TOTAL_CHECKS)"
    echo ""
    echo "üéâ Your code is ready for CI/CD pipeline!"
    echo "‚úÖ Safe to push to GitHub"
    echo ""
else
    print_error "Some checks failed: $FAILED_CHECKS failed, $PASSED_CHECKS passed out of $TOTAL_CHECKS total"
    echo ""
    echo "‚ùå Please fix failing checks before pushing"
    echo ""
fi

# Summary of what this covers
echo "üìã COVERAGE SUMMARY"
echo "==================="
echo "‚úÖ Code formatting and style"
echo "‚úÖ Rust clippy lints"
echo "‚úÖ Documentation generation"
echo "‚úÖ Debug and release builds"
echo "‚úÖ Unit and integration tests"
echo "‚úÖ Chess rules validation"
echo "‚úÖ Performance benchmarks (if available)"
echo "‚úÖ Cross-platform compilation checks"
echo "‚úÖ Language bindings compilation"
echo "‚úÖ Security vulnerability scanning"
echo ""

# Instructions for fixing common issues
if [ $FAILED_CHECKS -gt 0 ]; then
    echo "üîß COMMON FIXES"
    echo "==============="
    echo "‚Ä¢ Formatting issues: Run 'cargo fmt --all'"
    echo "‚Ä¢ Clippy warnings: Run 'cargo clippy --fix --all-targets --all-features'"
    echo "‚Ä¢ Test failures: Check test output and fix underlying issues"
    echo "‚Ä¢ Build errors: Check compiler messages and fix syntax/dependency issues"
    echo ""
fi

echo "üöÄ To run individual checks:"
echo "   ./scripts/run-ci-locally.sh --format     # Just formatting"
echo "   ./scripts/run-ci-locally.sh --clippy     # Just clippy"
echo "   ./scripts/run-ci-locally.sh --test       # Just tests"
echo "   ./scripts/run-ci-locally.sh --bench      # Just benchmarks"
echo ""

# Exit with appropriate code
if [ $FAILED_CHECKS -eq 0 ]; then
    exit 0
else
    exit 1
fi