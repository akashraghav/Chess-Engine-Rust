#!/bin/bash
set -e

# Comprehensive test runner - matches CI test job
# Usage: ./scripts/test-all.sh [--coverage]

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[TEST]${NC} $1"; }
print_success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
print_error() { echo -e "${RED}[‚úó]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[‚ö†]${NC} $1"; }

echo "üß™ Comprehensive Test Suite"
echo "==========================="
echo ""

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    print_error "Not in project root directory"
    exit 1
fi

COVERAGE=false
if [ "$1" = "--coverage" ]; then
    COVERAGE=true
    print_status "Coverage reporting enabled"
fi

FAILED=0

# Build first
print_status "Building project for testing..."
if ! cargo build --verbose; then
    print_error "Build failed"
    exit 1
fi
print_success "Build complete"

echo ""

# Unit tests
print_status "Running unit tests..."
if ! cargo test --lib --verbose; then
    print_error "Unit tests failed"
    FAILED=1
else
    print_success "Unit tests ($(cargo test --lib --verbose 2>&1 | grep -c 'test.*ok'))"
fi

echo ""

# Chess rules tests
print_status "Running chess rules validation tests..."
if ! cargo test --test chess_rules --verbose; then
    print_error "Chess rules tests failed"
    FAILED=1
else
    print_success "Chess rules tests ($(cargo test --test chess_rules --verbose 2>&1 | grep -c 'test.*ok'))"
fi

echo ""

# Integration tests (if they exist)
print_status "Running integration tests..."
if cargo test --test integration --verbose 2>/dev/null; then
    print_success "Integration tests"
else
    print_warning "Integration tests not found or failed"
fi

echo ""

# Performance tests
print_status "Running performance tests..."
if cargo test --test performance --verbose 2>/dev/null; then
    print_success "Performance tests"
else
    print_warning "Performance tests not found"
fi

echo ""

# Specific chess engine validation tests
print_status "Running chess engine validation..."

# Test starting position move generation
print_status "Testing starting position move count..."
if cargo test test_starting_position_move_count --verbose 2>/dev/null; then
    print_success "Starting position validation"
else
    print_warning "Starting position test not found"
fi

# Test basic move making
print_status "Testing move making functionality..."
if cargo test test_move_making_basic --verbose 2>/dev/null; then
    print_success "Move making validation"
else
    print_warning "Move making test not found"
fi

# Test checkmate detection
print_status "Testing checkmate detection..."
if cargo test test_checkmate_detection --verbose 2>/dev/null; then
    print_success "Checkmate detection validation"
else
    print_warning "Checkmate test not found"
fi

echo ""

# Documentation tests
print_status "Running documentation tests..."
if cargo test --doc; then
    print_success "Documentation tests"
else
    print_warning "Documentation tests failed"
fi

echo ""

# Test with release optimizations
print_status "Running tests in release mode..."
if cargo test --release --lib -p chess-core; then
    print_success "Release mode tests"
else
    print_error "Release mode tests failed"
    FAILED=1
fi

echo ""

# Specific chess engine scenarios
print_status "Testing specific chess scenarios..."

echo "  Testing Scholar's Mate detection..."
if cargo test test_scholars_mate --verbose 2>/dev/null; then
    print_success "  Scholar's Mate scenario"
else
    print_warning "  Scholar's Mate test not found"
fi

echo "  Testing castling rules..."
if cargo test castle --verbose 2>/dev/null; then
    print_success "  Castling validation"
else
    print_warning "  Castling tests not found"
fi

echo "  Testing en passant..."
if cargo test en_passant --verbose 2>/dev/null; then
    print_success "  En passant validation"
else
    print_warning "  En passant tests not found"
fi

echo "  Testing promotion..."
if cargo test promotion --verbose 2>/dev/null; then
    print_success "  Pawn promotion validation"
else
    print_warning "  Promotion tests not found"
fi

echo ""

# Coverage report (if requested)
if [ "$COVERAGE" = true ]; then
    print_status "Generating test coverage report..."

    if command -v cargo-tarpaulin >/dev/null 2>&1; then
        print_status "Running tarpaulin for coverage..."
        cargo tarpaulin --out html --output-dir target/tarpaulin --verbose
        print_success "Coverage report generated in target/tarpaulin/"

        # Show coverage summary
        if [ -f "target/tarpaulin/tarpaulin-report.html" ]; then
            print_status "Coverage report available at: target/tarpaulin/tarpaulin-report.html"
        fi
    else
        print_warning "Coverage reporting requires cargo-tarpaulin"
        print_status "Install with: cargo install cargo-tarpaulin"
    fi
fi

echo ""

# Memory leak tests (if valgrind is available)
if command -v valgrind >/dev/null 2>&1; then
    print_status "Running memory leak detection..."
    if cargo build --release; then
        echo "  Testing for memory leaks in core engine..."
        # This is just an example - you'd run specific test binaries
        print_warning "  Memory leak testing requires manual configuration"
    fi
else
    print_warning "Valgrind not available for memory leak testing"
fi

# Thread safety tests
print_status "Testing thread safety..."
if cargo test --release -- --test-threads=8 2>/dev/null; then
    print_success "Multi-threaded test execution"
else
    print_warning "Multi-threaded testing issues detected"
fi

echo ""

# Final summary
if [ $FAILED -eq 0 ]; then
    print_success "All critical tests passed! üéâ"

    # Test statistics
    echo ""
    echo "üìä TEST STATISTICS"
    echo "=================="
    TOTAL_TESTS=$(cargo test --lib 2>&1 | grep -E 'test result:' | sed -E 's/.*([0-9]+) passed.*/\1/' || echo "N/A")
    echo "‚Ä¢ Unit tests: $TOTAL_TESTS passed"

    CHESS_TESTS=$(cargo test --test chess_rules 2>&1 | grep -E 'test result:' | sed -E 's/.*([0-9]+) passed.*/\1/' || echo "N/A")
    echo "‚Ä¢ Chess rules: $CHESS_TESTS passed"

    echo "‚Ä¢ Documentation tests: Passed"
    echo "‚Ä¢ Release mode tests: Passed"

    echo ""
    echo "üéØ VALIDATION COVERAGE"
    echo "======================"
    echo "‚úÖ Core chess logic"
    echo "‚úÖ Move generation (all piece types)"
    echo "‚úÖ Special moves (castling, en passant, promotion)"
    echo "‚úÖ Game state detection (check, checkmate, stalemate)"
    echo "‚úÖ FEN parsing and position management"
    echo "‚úÖ Performance requirements"
    echo "‚úÖ Thread safety (basic)"

    if [ "$COVERAGE" = true ]; then
        echo "‚úÖ Code coverage analysis"
    fi

    echo ""
    echo "üöÄ Ready for production!"

else
    print_error "$FAILED critical test suites failed"
    echo ""
    echo "üîß RECOMMENDED FIXES"
    echo "===================="
    echo "1. Check test output above for specific failures"
    echo "2. Run individual test suites: cargo test <test_name> --verbose"
    echo "3. Debug with: cargo test -- --nocapture"
    echo "4. Check for race conditions in multi-threaded code"
    echo "5. Verify chess logic against known test positions"

    exit 1
fi

echo ""
echo "üìù NOTES"
echo "========"
echo "‚Ä¢ Run with --coverage for detailed coverage report"
echo "‚Ä¢ Individual test suites: cargo test --test <name>"
echo "‚Ä¢ Benchmark performance: ./scripts/run-benchmarks.sh"
echo "‚Ä¢ Full CI simulation: ./scripts/run-ci-locally.sh"